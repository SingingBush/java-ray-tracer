import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

javafx {
    version = JavaVersion.current().getMajorVersion()
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

sourceCompatibility = 11
version = '1.0'

mainClassName = "ex02.RayTracerFX"
//mainClassName = "ex02.RayTracerSWT"

if (Os.isFamily(Os.FAMILY_MAC)) {
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"] // required on OSX
}

if (Os.isFamily(Os.FAMILY_UNIX)) {
    // JavaFX won't work properly with Wayland yet, even if you set GTK to version 2 with '-Djdk.gtk.version=2'
    // This can be worked around by setting an environment variable: GDK_BACKEND=x11
    run.environment('GDK_BACKEND', 'x11')
}

repositories {
    mavenCentral()
}

String os = System.getProperty('os.name').toLowerCase().split()[0]
String arch = System.getProperty('os.arch')

println "Need to build with native swt lib for ${os}-${arch}"

dependencies {
//    compile fileTree(dir: 'libs', include: '*.jar')
    compile files("src/main/lib/swt-4.6.3-${os}.jar")

//    compile 'org.openjfx:javafx-base:11'
//    compile 'org.openjfx:javafx-controls:11'
    //compile 'org.openjfx:javafx-fxml:11'

    compile 'org.jetbrains:annotations:19.0.0'
    compile project(':raytracer')

    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.2'

    testCompile 'org.junit.vintage:junit-vintage-engine:5.6.2'
}
