import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

allprojects {
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    group = 'ex02'
    version = '1.0'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "org.javamodularity.moduleplugin"

    dependencies {
        def junitVersion = '5.11.+'
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.+'
    }

    test {
        useJUnitPlatform {
            // excludeTags 'ignore'
            includeEngines 'junit-jupiter'
            excludeEngines 'junit-vintage'
        }
        testLogging {
            events TestLogEvent.PASSED, TestLogEvent.FAILED, TestLogEvent.SKIPPED
            showCauses true
        }
    }
}

javafx {
    version = JavaVersion.current().getMajorVersion()
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}


application {
    mainClass = "ex02.RayTracerFX"
    //mainClass = "ex02.RayTracerSWT"
    mainModule = moduleName
}

if (Os.isFamily(Os.FAMILY_MAC)) {
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"] // required on OSX
}

if (Os.isFamily(Os.FAMILY_UNIX)) {
    // JavaFX won't work properly with Wayland yet, even if you set GTK to version 2 with '-Djdk.gtk.version=2'
    // This can be worked around by setting an environment variable: GDK_BACKEND=x11
    run.environment('GDK_BACKEND', 'x11')
}

String os = System.getProperty('os.name').toLowerCase().split()[0]
String arch = System.getProperty('os.arch')

println "Need to build with native swt lib for ${os}-${arch}"

dependencies {
    // Unfortunately it's not possible to get the latest SWT jars from maven central due to the antiquated way in
    // which Eclipse ship software. This means instead the platform specific jars are downloaded and placed in to
    // the lib directory by hand and named in a way that's convenient to select at build time:
    var swtVersion = '4.29' // JDK 17 and above
    //  - swt-4.29-windows-amd64.zip       Windows (64 bit version)
    //  - swt-4.29-linux-amd64.zip         Linux (64 bit version)
    //  - swt-4.29-linux-ppc64le.zip        Linux (64 bit version for Power PC)
    //  - swt-4.29-linux-aarch64.zip        Linux (64 bit version for AArch64)
    //  - swt-4.29-mac-amd64.zip           Mac OSX (64 bit version)
    //  - swt-4.29-mac-aarch64.zip          Mac OSX (64 bit version for Arm64/AArch64)
//    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation files("src/main/lib/swt-${swtVersion}-${os}-${arch}.jar")

    // There are some older 3.* (latest: 3.124.100) Eclipse SWT release on maven central. Maven coordinates are as follows:
    //  - org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64
    //  - org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64
    //  - org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64
    // As they are no longer updated it's easier to stick to the manual approach
    // implementation 'org.eclipse.platform:org.eclipse.swt.${}.${}.${arch}:${swtVersion}'

    // implementation 'org.openjfx:javafx-base:11'
    // implementation 'org.openjfx:javafx-controls:11'
    // implementation 'org.openjfx:javafx-fxml:11'

    implementation 'org.jetbrains:annotations:26.+'

    implementation project(':blas')
    implementation project(':entities')
    implementation project(':raytracer')

    implementation 'org.slf4j:slf4j-api:2.0.+'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.24.+'
}
